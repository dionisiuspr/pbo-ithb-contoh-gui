package newpackage;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Ria Chan
 */
public class KiritoEatSushi extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private Kirito lblKirito2;
    private Sushi sushi;
    private int counter;

    public KiritoEatSushi() {
        initComponents();
        this.getContentPane().setBackground(Color.green);
        repaint();
        lblKirito2 = new Kirito();
        lblKirito2.setBounds(0, 0, 100, 150);
        lblKirito2.setIcon(new ImageIcon(resizeImage("img/kirito.png", 100, 150)));
        this.add(lblKirito2);

        sushi = new Sushi();
        sushi.setBounds(100, 100, 50, 50);
        sushi.setIcon(new ImageIcon(resizeImage("img/sushi.png", 50, 50)));
        this.add(sushi);

        Thread t = new Thread(sushi);
        t.start();

        addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent ke) {
                switch (ke.getKeyCode()) {
                    case KeyEvent.VK_UP: {
                        int x = 0;
                        int y = -10;
                        doSomething(x, y);
                        break;
                    }
                    case KeyEvent.VK_LEFT: {
                        int x = -10;
                        int y = 0;
                        doSomething(x, y);
                        break;
                    }
                    case KeyEvent.VK_RIGHT: {
                        int x = 10;
                        int y = 0;
                        doSomething(x, y);
                        break;
                    }
                    case KeyEvent.VK_DOWN: {
                        int x = 0;
                        int y = 10;
                        doSomething(x, y);
                        break;
                    }
                    default:
                        break;
                }
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                //doSomething(); - this may create confusion.
            }

            @Override
            public void keyTyped(KeyEvent ke) {

            }
        });

    }

    public void doSomething(int x, int y) {
        System.out.println(x + y);
        lblKirito2.setLocation(lblKirito2.getX() + x, lblKirito2.getY() + y);

        if (intersects(lblKirito2, sushi)) {
            System.out.println("nubruk!!");
//            sushi.setReset(true);

            if (sushi.isVisible()) {
                counter++;
                score.setText(counter + "");
                repaint();
            }
            sushi.setVisible(false);

        }
    }

    private Image resizeImage(String url, int x, int y) {
        Image dimg = null;
        try {
            BufferedImage img = ImageIO.read(new File(url));
            dimg = img.getScaledInstance(x, y, Image.SCALE_SMOOTH);

        } catch (IOException ex) {
            ex.printStackTrace(System.err);
        }
        return dimg;
    }

    public boolean intersects(JLabel lblA, JLabel lblB) {
        Area areaA = new Area(lblA.getBounds());
        Area areaB = new Area(lblB.getBounds());

        return areaA.intersects(areaB.getBounds2D());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblKirito = new javax.swing.JLabel();
        score = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblKirito.setText("-");
        lblKirito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lblKiritoKeyPressed(evt);
            }
        });

        score.setText("Score");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(lblKirito)
                .addContainerGap(329, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(score)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(score)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 347, Short.MAX_VALUE)
                .addComponent(lblKirito)
                .addGap(45, 45, 45))
        );

        setSize(new java.awt.Dimension(500, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblKiritoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblKiritoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            System.out.println("a");
        }
        System.out.println("a!!");
    }//GEN-LAST:event_lblKiritoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KiritoEatSushi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KiritoEatSushi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KiritoEatSushi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KiritoEatSushi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KiritoEatSushi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblKirito;
    private javax.swing.JLabel score;
    // End of variables declaration//GEN-END:variables
}
